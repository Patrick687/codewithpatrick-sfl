generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  leagues LeagueMember[]
  picks   Pick[]

  @@map("users")
}

model League {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members LeagueMember[]
  picks   Pick[]

  @@map("leagues")
}

enum LeagueRole {
  OWNER
  ADMIN
  MEMBER
  @@map("league_role")
}

model LeagueMember {
  id       String  @id @default(cuid())
  userId   String
  leagueId String
  role     LeagueRole @default(MEMBER)

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  league League @relation(fields: [leagueId], references: [id], onDelete: Cascade)

  @@unique([userId, leagueId])
  @@map("league_members")
}

model Survivor {
  id        String  @id @default(cuid())
  firstName String
  lastName  String
  age       Int
  tribe     String
  isActive  Boolean @default(true)
  season    String

  // Relations
  picks Pick[]

  @@map("survivors")
}

model Pick {
  id           String @id @default(cuid())
  userId       String
  leagueId     String
  contestantId String
  week         Int
  points       Int    @default(0)

  //Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  league   League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  survivor Survivor @relation(fields: [contestantId], references: [id], onDelete: Cascade)

  @@unique([userId, leagueId, week])
  @@map("picks")
}
